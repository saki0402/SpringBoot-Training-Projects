package com.training.boot.jpa.controller.rest;

import java.util.Optional;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
// request to controller will be http://localhost:8082/status
//@Controller

import com.training.boot.jpa.controller.model.EmployeeDTO;
import com.training.boot.jpa.entities.EmployeeEntity;
import com.training.boot.jpa.repository.EmployeeRepository;
import com.training.boot.jpa.service.EmployeeService;
@RestController  // internally, it means the class with @Controller and all methods will be annotated with @ResponseBody
public class EmployeeController {
	
	
	private EmployeeService service;
	
	@Autowired
	public EmployeeController(EmployeeService service) {
		System.out.println("EmployeeController instantiated..");
		this.service = service;
	}

	// map the method with the URL to handle incoming request
	// if you are designing a RESt API, the method must be annotated with @ResponseBody to send the response to client
	@RequestMapping(path="/status", method= RequestMethod.GET)
	//@ResponseBody
	public String updateStatus() {
		return "EmployeeController handles HTTP request";
	}
	
	// if we do not mention method attribute, default is GET method
	@RequestMapping(path="/employees/{id}")
	public EmployeeDTO getEmployeeDetails(@PathVariable("id") Long id) {
		Optional<EmployeeEntity> optional =  repository.findById(id);
		EmployeeDTO returnObject = new EmployeeDTO();
		if (optional.isPresent()) {
			EmployeeEntity employee = optional.get();
			BeanUtils.copyProperties(employee, returnObject);
		}
		
		return returnObject;
	}
	
	
	
	
	
	
	
}
